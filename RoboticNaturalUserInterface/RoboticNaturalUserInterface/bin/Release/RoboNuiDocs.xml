<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RoboticNaturalUserInterface</name>
    </assembly>
    <members>
        <member name="T:RoboNui.Core.PulseWidthConstants">
            <summary>
            Struct of constants for translating pulse widths to angles and angles to pulse widths.s
            </summary>
            
            <remarks>
            Author: Jon Eisen (yanatan16@gmail.com)
            </remarks>
        </member>
        <member name="M:RoboNui.Core.PulseWidthConstants.#ctor(System.Double,System.UInt64)">
            <summary>
            Constructor with arguments
            </summary>
            <param name="C">Constant value</param>
            <param name="M">Multiplier value</param>
        </member>
        <member name="M:RoboNui.Core.PulseWidthConstants.AngleToPulseWidth(System.Double)">
            <summary>
            Convert an Angle to a Pulse Width
            </summary>
            <param name="a">Angle to convert</param>
            <returns>Pulse width</returns>
        </member>
        <member name="M:RoboNui.Core.PulseWidthConstants.PulseWidthToAngle(System.UInt64)">
            <summary>
            Convert a Pulse Width to an Angle
            </summary>
            <param name="pw">Pulse width to convert</param>
            <returns>Angle value</returns>
        </member>
        <member name="P:RoboNui.Core.PulseWidthConstants.Multiplier">
            <summary>Multiplier M for linear function of angle to pulse width: PW = M * A + C</summary>
        </member>
        <member name="P:RoboNui.Core.PulseWidthConstants.Constant">
            <summary>Constant C for linear function of angle to pulse width: PW = M * A + C</summary>
        </member>
        <member name="T:RoboNui.Core.AngleSet">
            <summary>
            A struct that contains the angles of the robot
            </summary>
            <remarks>Author: Jon Eisen (yanatan16@gmail.com)</remarks>
            <seealso cref="T:RoboNui.Core.RoboticAngle"/>
        </member>
        <member name="M:RoboNui.Core.AngleSet.#ctor">
            <summary>
            Construct the JointSet.
            </summary>
        </member>
        <member name="M:RoboNui.Core.AngleSet.GetPulseWidthMap(RoboNui.Core.PulseWidthConstants)">
            <summary>
            Translate the Angle Map to a pulse width map given a struct of Pulse Width Constants
            </summary>
            <param name="pwc">Pulse Width Constant for pulse width translation</param>
            <returns>Pulse Width Dictionary Map</returns>
        </member>
        <member name="M:RoboNui.Core.AngleSet.SetPulseWidthMap(System.Collections.Generic.Dictionary{RoboNui.Core.RoboticAngle,System.UInt64},RoboNui.Core.PulseWidthConstants)">
            <summary>
            Set the Angle Map by setting a Pulse Width Map given a struct of Pulse Width Constants
            </summary>
            <param name="PulseWidthMap">Map of roboticangles to pulse widths</param>
            <param name="pwc">Pulse Width Constant for pulse width translation</param>
        </member>
        <member name="P:RoboNui.Core.AngleSet.AngleMap">
            <summary>
            Map of Robotic Angles to double angles.
            </summary>
            <remarks>
            Angles are in the range -Math.PI to Math.PI
            </remarks>
        </member>
        <member name="T:RoboNui.Core.Position3d">
            <summary>
            3 Dimensional position
            
            This class offers getters and setters for rectangular, cylindrical, and spherical coordinate systems.
            
            </summary>
            <remarks>
            Author: Jon Eisen (yanatan16@gmail.com)
            </remarks>
        </member>
        <member name="M:RoboNui.Core.Position3d.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:RoboNui.Core.Position3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor with rectangular coordinates
            </summary>
        </member>
        <member name="M:RoboNui.Core.Position3d.Magnitude">
            <summary>Magnitude (2-norm) of this vector</summary>
            <returns>Magnitude of this vector</returns>
        </member>
        <member name="M:RoboNui.Core.Position3d.Dot(RoboNui.Core.Position3d)">
            <summary>Dot product with b</summary>
            <param name="b">Second vector to dot product</param>
            <returns>Dot product with b</returns>
        </member>
        <member name="M:RoboNui.Core.Position3d.op_Subtraction(RoboNui.Core.Position3d,RoboNui.Core.Position3d)">
            <summary>Subtract two Position3d's</summary>
            <param name="a">Positive element in sum</param>
            <param name="b">Negative element in sum</param>
            <returns>A Position3d object that is the sum of a and -b.</returns>
        </member>
        <member name="P:RoboNui.Core.Position3d.x">
            <summary>
            Rectangular horizontal distance from center
            </summary>
            <remarks>
            Range: All Reals
            </remarks>
        </member>
        <member name="P:RoboNui.Core.Position3d.y">
            <summary>
            Rectangular vertical distance from center
            </summary>
            <remarks>
            Range: All Reals
            </remarks>
        </member>
        <member name="P:RoboNui.Core.Position3d.z">
            <summary>
            Rectangular and Cylindrical depth from camera
            </summary>
            <remarks>
            Range: Positive Reals
            </remarks>
        </member>
        <member name="T:RoboNui.Management.StateManager">
            <summary>
            This class is the primary manager of the RoboNUI system.
            It performs actions based on commands from the <see cref="T:RoboNui.KinectAdapter.VoiceCommandInterpreter"/> or the GUI, as well as manage the current on/off state of the system. 
            It should also control the primary data path through the system, determining who the current human controller is, as well as setting the <see cref="T:RoboNui.Core.JointAngleTranslator"/> with the correct <see cref="T:RoboNui.Core.IRoboticModel"/> and the correct <see cref="T:RoboNui.Core.IAngleConsumer"/>.
            </summary>
        </member>
        <member name="F:RoboNui.Management.StateManager.log">
            <summary>Log for logging events in this class</summary>
        </member>
        <member name="F:RoboNui.Management.StateManager.config">
            <summary>Configuration struct for the system</summary>
        </member>
        <member name="M:RoboNui.Management.StateManager.#ctor(RoboNui.Management.StateConfiguration,System.Object)">
            <summary>
            Constructor for the State Manager. Set all current components to null.
            </summary>
        </member>
        <member name="M:RoboNui.Management.StateManager.Initialize">
            <summary>
            Construct the system components.
            </summary>
        </member>
        <member name="M:RoboNui.Management.StateManager.Startup">
            <summary>
            Start the system up in a default configuration.
            
            The SJM, JAT, and Robotic Arm RSC will be enabled.
            </summary>
        </member>
        <member name="M:RoboNui.Management.StateManager.Utilities#Messaging#IConsumer{RoboNui#Management#StateCommand}#Update(RoboNui.Management.StateCommand)">
            <summary>Handle the State Command by performing an action in the State Manager</summary>
            <seealso cref="M:IConsumer{StateCommand}.Update" />
        </member>
        <member name="P:RoboNui.Management.StateManager.Active">
            <summary>Active system boolean. An inactive system will not operate.</summary>
        </member>
        <member name="P:RoboNui.Management.StateManager.CurrentJointProvider">
            <summary>
            The currently active <see cref="T:Utilities.Messaging.Provider`1"/> in the system.
            Setting this field will deactivate and clear the previous one and activate and enable the new one.
            </summary>
        </member>
        <member name="P:RoboNui.Management.StateManager.CurrentJointConsumer">
            <summary>
            The currently active <see cref="T:Utilities.Messaging.IConsumer`1"/> in the system.
            Setting this field will clear the previous one and enable the new one.
            </summary>
        </member>
        <member name="P:RoboNui.Management.StateManager.CurrentAngleProvider">
                    * <summary>
                    * The currently active <see cref="T:Utilities.Messaging.Provider`1"/> in the system.
                     * Setting this field will deactivate and clear the previous one and activate and enable the new one.
                    * </summary>
        </member>
        <member name="P:RoboNui.Management.StateManager.CurrentAngleConsumer">
            <summary>
            The currently active <see cref="T:Utilities.Messaging.IConsumer`1"/> in the system.
            Setting this field will deactivate and clear the previous one and activate and enable the new one.
            </summary>
        </member>
        <member name="P:RoboNui.Management.StateManager.CurrentRoboticModel">
            <summary>The current <see cref="T:RoboNui.Core.IRoboticModel"/> setup for the SJM</summary>
            <seealso cref="T:RoboNui.KinectAdapter.SkeletalJointMonitor"/>
        </member>
        <member name="P:RoboNui.Management.StateManager.CurrentControllerID">
            <summary>The current human controller</summary>
        </member>
        <member name="P:RoboNui.Management.StateManager.PossibleControllerIDs">
            <summary>A list of possible controllers in view of the Kinect.</summary>
        </member>
        <member name="T:RoboNui.RecordPlayback.Playback">
            <summary>
            This class reads in stored angle data for robotic servos and forwards them to the <see cref="T:RoboNui.Messaging.IConsumer"/> denoted.
            
            Base Class: <see cref="T:Utilities.Messaging.Provider`1"/>
            </summary>
        </member>
        <member name="T:RoboNui.RobotAdapter.SSC32.ServoCommandGroup">
            <summary>
            An abstract base class representation of a servo command group to be sent to an SSC-32 servo controller.
            </summary>
            <remarks>
            Author: Jon Eisen (yanatan16@gmail.com)
            </remarks>
            <seealso cref="T:RoboNui.RobotAdapter.SSC32.QueryMovementStatus"/>
            <seealso cref="T:RoboNui.RobotAdapter.SSC32.QueryPulseWidth"/>
            <seealso cref="T:RoboNui.RobotAdapter.SSC32.ServoMovementCommand"/>
            <seealso cref="T:RoboNui.RobotAdapter.SSC32.ServoController"/>
        </member>
        <member name="F:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.ResponseLength">
            <summary>Length of the response</summary>
            <remarks>In units of bytes</remarks>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.#ctor(RoboNui.RobotAdapter.SSC32.ServoCommandGroup.ServoCommandType,System.UInt32,System.UInt32)">
            <summary>
            Constructor for a servo command group
            </summary>
            
            <param name="numCommands">Number of commands</param>
            <param name="type">Type of the Command Group</param>
            <param name="responseLength">Length of the response (in bytes)</param>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.CommandString">
            <summary>Construct the command string to send to the servo controller</summary>
            
            <returns>The command string to send</returns>
            <seealso cref="T:RoboNui.RobotAdapter.SSC32.ServoController"/>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.IncCommandString(System.Int32)">
            <summary>
            Abstract method to get the command string for each individual command sequentially
            </summary>
            
            <param name="commandIndex">Index of command to output</param>
            <returns>Incremental command string to send to the servo controller</returns>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.PostCommandString">
            <summary>
            Abstract method to get the end of the command string
            </summary>
            
            <returns>End of the command string to send to the servo controller</returns>
        </member>
        <member name="P:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.ComType">
            <summary>Type of Servo Command</summary>
        </member>
        <member name="P:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.NumCommands">
            <summary>Number of commands in this command group</summary>
        </member>
        <member name="T:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.ServoCommandType">
            <summary>
            An enumeration of the 12 command group types that can be sent to an SSC-32.
            </summary>
        </member>
        <member name="T:RoboNui.KinectAdapter.VoiceControlInterpreter">
            <summary>
            This class provides extended voice control functionality for the RoboNUI system. 
            It communicates solely with the State Manager for the purpose of commanding an action of the system.
            </summary>
            <remarks>Author: Jon Eisen (jon.m.eisen@gmail.com)</remarks>
        </member>
        <member name="F:RoboNui.KinectAdapter.VoiceControlInterpreter.log">
            <summary>Log for logging events in this class</summary>
        </member>
        <member name="M:RoboNui.KinectAdapter.VoiceControlInterpreter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:RoboNui.Management.CommandType">
            <summary>
            Enumeration of types of commands
            </summary>
        </member>
        <member name="T:RoboNui.Management.RoboticServoControllerType">
            <summary>
            Enumeration of types of servo controllers
            </summary>
        </member>
        <member name="T:RoboNui.Management.StateCommand">
            <summary>
            A command to the <see cref="T:RoboNui.Management.StateManager"/> to affect the system.
            </summary>
            <remarks> Author: Jon Eisen (jon.m.eisen@gmail.com)</remarks>
            <seealso cref="T:RoboNui.Management.StateManager"/>
        </member>
        <member name="P:RoboNui.Management.StateCommand.ComType">
            <summary>
            Type of command this is
            </summary>
        </member>
        <member name="P:RoboNui.Management.StateCommand.Argument">
            <summary>
            Argument for this command
            </summary>
        </member>
        <member name="T:RoboNui.RobotAdapter.SSC32.ServoMovementCommand">
            <summary>
            A servo command for servo movement to an SSC-32 servo controller
            
            Base class: Servo Command Group
            </summary>
            <remarks>
            Author: Jon Eisen (yanatan16@gmail.com)
            </remarks>
            <seealso cref="T:RoboNui.RobotAdapter.SSC32.ServoCommandGroup"/>
        </member>
        <member name="F:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.Channel">
            <summary>List of channel numbers to command (motor)</summary>
            <remarks>Range: 0 - 31</remarks>
        </member>
        <member name="F:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.PulseWidth">
            <summary>List of pulse widths to command (position)</summary>
            <remarks>
            In units of microseconds.
            Range: 0 - 3000, 1500 is middle
            </remarks>
        </member>
        <member name="F:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.MoveSpeed">
            <summary>List of movement speeds to command, optional</summary>
            <remarks>
            In units of microseconds per second
            Only limits speed, may go slower if <see cref="P:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.TotalTime"/> denotes.
            </remarks>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.#ctor">
            <summary>
            Constructor for this class.
            Instantiates a ServoMovement command from base class.
            </summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.addServoMovementCommand(System.UInt32,System.UInt64,System.UInt64)">
            <summary>
            Add a servo movement command to the command group
            </summary>
            <param name="ch">Channel number</param>
            <param name="pw">Pulse width</param>
            <param name="ms">movement speed (optional)</param>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.IncCommandString(System.Int32)">
            <summary>
            See <see cref="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.IncCommandString(System.Int32)"/> for inherited method summary.
            </summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.PostCommandString">
            <summary>
            See <see cref="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.PostCommandString"/> for inherited method summary.
            </summary>
        </member>
        <member name="P:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.TotalTime">
            <summary>Total time for entire movement command group</summary>
            <remarks>
            In unites of milliseconds
            Only limits speed, may go slower if <see cref="F:RoboNui.RobotAdapter.SSC32.ServoMovementCommand.MoveSpeed"/> denotes
            </remarks>
        </member>
        <member name="T:RoboNui.RobotAdapter.RoboticArmServoController">
            <summary>
            This class controls the Arm servos based on angles
            passed in through the IRoboticAngleConsumer interface.
            
            Base class: <see cref="T:RoboNui.RobotAdapter.SSC32.ServoController"/>
            Interface: <see cref="T:IConsumer{AngleSet}"/>
            </summary>
            <remarks>Author: Jon Eisen (yanatan16@gmail.com)</remarks>
            <seealso cref="T:RoboNui.RobotAdapter.SSC32.ServoController"/>
            <seealso cref="T:IConsumer{AngleSet}"/>
        </member>
        <member name="T:RoboNui.RobotAdapter.SSC32.ServoController">
            <summary>
            Base class for communicating commands to an SSC-32 servo controller
            </summary>
            <remarks>Author: Jon Eisen (yanatan16@gmail.com)</remarks>
        </member>
        <member name="F:RoboNui.RobotAdapter.SSC32.ServoController.log">
            <summary>Log for logging events in this class</summary>
        </member>
        <member name="F:RoboNui.RobotAdapter.SSC32.ServoController.port">
            <summary>
            Serial port this controller communicates on
            </summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoController.#ctor(System.String)">
            <summary>
            Constructor with port name and open the port
            </summary>
            
            <param name="portName">Name of the serial port</param>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoController.Finalize">
            <summary>
            Destructor of the class. 
            Closes the serial port.
            </summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.ServoController.sendCommand(RoboNui.RobotAdapter.SSC32.ServoCommandGroup)">
            <summary>
            Send a command to the servo controller
            </summary>
            
            <param name="com">Command to send</param>
            <returns>
            Byte array if command has a response.
            Length of byte array is com.getResponseLength())
            </returns>
        </member>
        <member name="F:RoboNui.RobotAdapter.RoboticArmServoController.log">
            <summary>Log for logging events in this class</summary>
        </member>
        <member name="F:RoboNui.RobotAdapter.RoboticArmServoController.PulseWidthConverter">
            <summary>
            A set of pulse width constants for this consumer to use
            </summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.RoboticArmServoController.#ctor(System.String,System.Collections.Generic.Dictionary{RoboNui.Core.RoboticAngle,System.UInt32},System.UInt64)">
            <summary>
            Constructor with port name, channel map, and default movement speed
            </summary>
            <param name="channelMap">Map of robotic angles to channel number</param>
            <param name="portName">The serial port of the servo controller</param>
            <param name="speed">Optional generic speed of each movement</param>
        </member>
        <member name="M:RoboNui.RobotAdapter.RoboticArmServoController.Utilities#Messaging#IConsumer{RoboNui#Core#AngleSet}#Update(RoboNui.Core.AngleSet)">
            <summary>See <see cref="M:IConsumer{AngleSet}.Update"/> for inherited method summary.</summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.RoboticArmServoController.GetAngles(System.Collections.Generic.List{RoboNui.Core.RoboticAngle})">
            <summary>Get positions of joints</summary>
            
            <param name="roboticAngleList">List of joints to retreive angle positions for</param>
            Joint list - list of joints requesting positions on
            <returns>Angle set of joint positions</returns>
        </member>
        <member name="M:RoboNui.RobotAdapter.RoboticArmServoController.IsMovementFinished">
            <summary>Query if movement is finished</summary>
            
            <returns>Boolean true if movement is finished, false otherwise</returns>
        </member>
        <member name="P:RoboNui.RobotAdapter.RoboticArmServoController.ChannelMap">
            <summary>
            Mapping of RoboNUI.RoboticAngle to SSC-32 servo channels
            </summary>
        </member>
        <member name="P:RoboNui.RobotAdapter.RoboticArmServoController.Speed">
            <summary>
            Generic speed for each movement
            </summary>
            <remarks>In units of microsecond per second</remarks>
        </member>
        <member name="T:RoboNui.Core.JointSet">
            <summary>
            A struct that contains the joint positions of the controller
            </summary>
            <remarks>
            Author: Jon Eisen (yanatan16@gmail.com)
            </remarks>
            <seealso cref="T:RoboNui.Core.ControllerJoints"/>
            <seealso cref="T:RoboNui.Core.Position3d"/>
        </member>
        <member name="M:RoboNui.Core.JointSet.#ctor">
            <summary>
            Construct the JointSet.
            </summary>
        </member>
        <member name="P:RoboNui.Core.JointSet.JointMap">
            <summary>
            Map of Controller Joints to Positions.
            </summary>
        </member>
        <member name="T:RoboNui.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:RoboNui.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:RoboNui.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:RoboNui.RobotAdapter.RoboticMarionetteServoController">
            <summary>
            This class controls the Marionette servos based on angles passed in through the <see cref="T:IConsumer"/> interface.
            
            Interface: <see cref="T:IConsumer"/> with T = <see cref="T:RoboNui.Core.AngleSet"/>
            </summary>
        </member>
        <member name="F:RoboNui.RobotAdapter.RoboticMarionetteServoController.log">
            <summary>Log for logging events in this class</summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.RoboticMarionetteServoController.Utilities#Messaging#IConsumer{RoboNui#Core#AngleSet}#Update(RoboNui.Core.AngleSet)">
            <summary>See <see cref="M:IConsumer.Update"/> for the inherited method summary</summary>
        </member>
        <member name="T:RoboNui.RobotAdapter.SSC32.QueryPulseWidth">
            <summary>
            Servo controller command to query the pulse width of channels on the servo controller
            
            This command group has return values from the servo.
            
            Base class: <see cref="T:RoboNui.RobotAdapter.SSC32.ServoCommandGroup"/>
            </summary>
            
            <remarks>
            Author: Jon Eisen (yanatan16@gmail.com)
            </remarks>
        </member>
        <member name="F:RoboNui.RobotAdapter.SSC32.QueryPulseWidth.Channel">
            <summary>List of channels to query pulse width</summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.QueryPulseWidth.#ctor">
            <summary>
            Constructor which instantiates a Pulse Width Query Servo Command Type.
            </summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.QueryPulseWidth.addChannel(System.UInt32)">
            <summary>
            Add channel to query command
            </summary>
            
            <param name="ch">Channel number</param>
            <remarks>
            Increases the response length by one
            </remarks>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.QueryPulseWidth.IncCommandString(System.Int32)">
            <summary>See <see cref="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.IncCommandString(System.Int32)"/> for inherited method summary.</summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.QueryPulseWidth.PostCommandString">
            <summary>See <see cref="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.PostCommandString"/> for inherited method summary.</summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.QueryPulseWidth.interpretPulseWidths(System.Byte[])">
            <summary>
            Static method to interpret the response from the servo controller
            </summary>
            
            <param name="response">Response received from servo controller</param>
            <returns>Array of pulse widths corresponding to channels selected.</returns>
        </member>
        <member name="T:RoboNui.Starter">
            <summary>
            This class acts as a starter for the RoboNui system.
            </summary>
            <remarks>Author: Jon Eisen (yanatan16@gmail.com)</remarks>
            
        </member>
        <member name="M:RoboNui.Starter.start">
            <summary>Main method for RobotNui</summary>
        </member>
        <member name="T:RoboNui.RobotAdapter.RoboticArmModel">
            <summary>
            This class provides a translation from human controller joints to Robotic Arm angles.
            These angles are determined by a model of the physical robotic arm itself.
            </summary>
            
            <remarks>Author: Jon Eisen (yanatan16@gmail.com)</remarks>
            <seealso cref="T:RoboNui.Core.IRoboticModel"/>
        </member>
        <member name="T:RoboNui.Core.IRoboticModel">
            <summary>
            Provides the capability to translate from a human model of Joints to a Robotic model of Angles
            </summary>
            <remarks>
            Author: Jon Eisen (yanatan16@gmail.com)
            </remarks>
        </member>
        <member name="M:RoboNui.Core.IRoboticModel.Translate(RoboNui.Core.JointSet)">
            <summary>
            Translate between a human Joints model to a Robotic angle model
            </summary>
            <param name="js"> Joint positions from human controller </param>
            <returns> Robotic angles from robot model </returns>
        </member>
        <member name="P:RoboNui.Core.IRoboticModel.NeededJoints">
            <summary> The list of joints that this model requires to translate.</summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.RoboticArmModel.#ctor">
            <summary>Construct the Robotic Arm Model</summary>
            
        </member>
        <member name="M:RoboNui.RobotAdapter.RoboticArmModel.Translate(RoboNui.Core.JointSet)">
            <summary>Translate between joints to angles for the robotic arm</summary>
            <see cref="M:RoboNui.Core.IRoboticModel.Translate(RoboNui.Core.JointSet)"/>
        </member>
        <member name="P:RoboNui.RobotAdapter.RoboticArmModel.NeededJoints">
            <summary> The list of joints that this model requires to translate.</summary>
        </member>
        <member name="T:RoboNui.RecordPlayback.Recorder">
            <summary>
            This class records angles sent to the <see cref="T:IConsumer"/> and stores it for later.
            
            Interface: <see cref="T:RoboNui.Messaging.IConsumer"/> with T = <see cref="T:RoboNui.Core.AngleSet"/>
            </summary>
            <seealso cref="T:Provider{AngleSet}"/>
        </member>
        <member name="M:RoboNui.RecordPlayback.Recorder.Utilities#Messaging#IConsumer{RoboNui#Core#AngleSet}#Update(RoboNui.Core.AngleSet)">
            <summary>See <see cref="M:IConsumer.Update"/> for the inherited method summary</summary>
        </member>
        <member name="T:RoboNui.Core.NoRoboticModelException">
            <summary>
            Thrown when the <see cref="T:RoboNui.Core.JointAngleTranslator"/> has no <see cref="T:RoboNui.Core.IRoboticModel"/> when its <see cref="M:JointAngleTranslator.Update"/> is called.
            </summary>
            
            <remarks>
            Author: Jon Eisen (yanatan16@gmail.com)
            </remarks>
            
            <seealso cref="T:System.Exception"/>
            <seealso cref="T:RoboNui.Core.JointAngleTranslator"/>
            <seealso cref="T:RoboNui.Core.IRoboticModel"/>
        </member>
        <member name="T:RoboNui.Core.JointAngleTranslator">
            <summary>
            This component translates between Kinect Joints and Robotic Angles
            After being called with new Joints' positions, the JAT forwards them
            to the currently active IRoboticAngleConsumer, which is set by the
            State Manager.
            
            Base Class: <see cref="T:Utilities.Messaging.Provider`1"/>
            Interface: <see cref="T:Utilities.Messaging.IConsumer`1"/>
            </summary>
            <remarks>
            Author: Jon Eisen (yanatan16@gmail.com)
            </remarks>
            
            <seealso cref="T:Provider{AngleSet}"/>
            <seealso cref="T:IConsumer{JointSet}"/>
        </member>
        <member name="F:RoboNui.Core.JointAngleTranslator.log">
            <summary>Log for logging events in this class</summary>
        </member>
        <member name="M:RoboNui.Core.JointAngleTranslator.#ctor">
            <summary>
            Constructor for this class
            </summary>
            
            <remarks>
            Setting the JointPositions parameter will throw a <see cref="T:RoboNui.Core.NoRoboticModelException"/> if Model is not set.
            </remarks>
        </member>
        <member name="M:RoboNui.Core.JointAngleTranslator.#ctor(RoboNui.Core.IRoboticModel)">
            <summary>
            Constructor requiring a model to be passed in.
            </summary>
            
            <param name="model">Robotic Model to use on construction</param>
        </member>
        <member name="M:RoboNui.Core.JointAngleTranslator.Update(RoboNui.Core.JointSet)">
            <summary>
            This will translate the positions to angles through the Robotic Model.
            Then it will forward those angles to the Robotic Consumers who are registered.
            </summary>
            <exception cref="T:RoboNui.Core.NoRoboticModelException">Thrown when Model is not set</exception>
            <seealso cref="T:RoboNui.Core.IRoboticModel"/>
            <remarks>See <see cref="M:IConsumer{JointSet}.Update"/> for inherited method comments. </remarks>
        </member>
        <member name="P:RoboNui.Core.JointAngleTranslator.Model">
            <summary>
            The Model for translating between joint positions to robot angles
            </summary>
            <seealso cref="T:RoboNui.Core.IRoboticModel"/>
        </member>
        <member name="T:RoboNui.Management.StateConfiguration">
             <summary>
             Configuration structure for RoboNui.
             
             Contains all necessary paramters to be read on Startup for the operation of the StateManager's control of the system.
             </summary>
            
             <remarks>Author: Jon Eisen (jon.m.eisen@gmail.com) </remarks>
        </member>
        <member name="F:RoboNui.Management.StateConfiguration.RobotAdapter">
            <summary>Accessible Field for the Robot Adapter Assembly configuration sub-struct</summary>
        </member>
        <member name="F:RoboNui.Management.StateConfiguration.KinectAdapter">
            <summary>Accessible Field for the Kinect Adapter Assembly configuration sub-struct</summary>
        </member>
        <member name="F:RoboNui.Management.StateConfiguration.Core">
            <summary>Accessible Field for the Core RoboNui Assembly configuration sub-struct</summary>
        </member>
        <member name="M:RoboNui.Management.StateConfiguration.#ctor">
            <summary>Construct the Configuration with default values.</summary>
        </member>
        <member name="M:RoboNui.Management.StateConfiguration.ReadConfigFile(System.String)">
            <summary>Construct the Configuration with a configuration file to load in custom configuration.</summary>
        </member>
        <member name="T:RoboNui.Management.StateConfiguration._RobotAdapterConfig">
            <summary>
            Configuration sub-struct for the RobotAdapter Assembly.
            </summary>
        </member>
        <member name="F:RoboNui.Management.StateConfiguration._RobotAdapterConfig.Arm">
            <summary>Accessible Field for the Robotic Arm configuration sub-struct</summary>
        </member>
        <member name="F:RoboNui.Management.StateConfiguration._RobotAdapterConfig.Marionette">
            <summary>Accessible Field for the Robotic Marionette configuration sub-struct</summary>
        </member>
        <member name="T:RoboNui.Management.StateConfiguration._RobotAdapterConfig._Arm">
            <summary>
            Configuration sub-struct for the Robotic Arm component(s).
            </summary>
        </member>
        <member name="F:RoboNui.Management.StateConfiguration._RobotAdapterConfig._Arm.Port">
            <summary>Serial Port name of the Robotic Arm's Servo Controller</summary>
        </member>
        <member name="F:RoboNui.Management.StateConfiguration._RobotAdapterConfig._Arm.Channels">
            <summary>Robotic Angle to Channel Number list</summary>
        </member>
        <member name="F:RoboNui.Management.StateConfiguration._RobotAdapterConfig._Arm.Speed">
            <summary>Speed of motions for the Robotic Arm (in microseconds per second)</summary>
        </member>
        <member name="T:RoboNui.Management.StateConfiguration._RobotAdapterConfig._Marionette">
            <summary>
            Configuration sub-struct for the Robotic Marionette component(s).
            </summary>
        </member>
        <member name="T:RoboNui.Management.StateConfiguration._KinectAdapter">
            <summary>
            Configuration sub-struct for the Kinect Adapter Assembly.
            </summary>
        </member>
        <member name="F:RoboNui.Management.StateConfiguration._KinectAdapter.Period">
            <summary>Period to update the system</summary>
            <remarks>In milliseconds</remarks>
        </member>
        <member name="T:RoboNui.Management.StateConfiguration._Core">
            <summary>
            Configuration sub-struct for the Core RoboNui Assembly.
            </summary>
        </member>
        <member name="T:RoboNui.RobotAdapter.SSC32.QueryMovementStatus">
            <summary>
            Query the movement status of the servo controller.
            
            This command group has one return byte.
            
            Base class: <see cref="T:RoboNui.RobotAdapter.SSC32.ServoCommandGroup"/>
            </summary>
            <remarks>Author: Jon Eisen (yanatan16@gmail.com)</remarks>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.QueryMovementStatus.#ctor">
            <summary>Constructor to construct a Query Movement Status Command Group</summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.QueryMovementStatus.IncCommandString(System.Int32)">
            <summary>See <see cref="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.IncCommandString(System.Int32)"/> for inherited method summary</summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.QueryMovementStatus.PostCommandString">
            <summary>See <see cref="M:RoboNui.RobotAdapter.SSC32.ServoCommandGroup.PostCommandString"/> for inherited method summary</summary>
        </member>
        <member name="M:RoboNui.RobotAdapter.SSC32.QueryMovementStatus.interpretMovementStatus(System.Byte[])">
            <summary>
            Static method to interpret the response from the servo controller
            </summary>
            <param name="response">Response received from servo controller</param>
            <returns>Boolean true if movement in complete, false otherwise</returns>
        </member>
        <member name="T:RoboNui.Core.ControllerJoints">
            <summary>
            Enumeration of human controller joints possible in this system
            Each <see cref="T:RoboNui.Core.IRoboticModel"/> will only need a subset of these
            </summary>
            
            <remarks>
            This is an exact copy of JointID from Microsoft.Research.Kinect.Nui and 
            is done so to enable non-Kinect SDK users to develop for this system
            </remarks>
            <seealso cref="T:Microsoft.Research.Kinect.Nui.JointID"/>
            <seealso cref="T:RoboNui.Core.IRoboticModel"/>
            <seealso cref="T:RoboNui.Core.JointSet"/>
        </member>
        <member name="T:RoboNui.Core.RoboticAngle">
            <summary>
            List of angles possible in this system
            </summary>
            <remarks>
            Each servo controller will only use a subset of these
            </remarks>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.ArmBaseRotate">
            <summary> Arm angle of the arm with respect to a horizontal rotation about the base</summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.ArmShoulderLift">
            <summary> Arm angle of the vertical tilt of the arm</summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.ArmElbowBend">
            <summary> Arm angle of the elbow's bend</summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.ArmWristTilt">
            <summary> Arm angle of the wrist's tilt</summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.ArmWristRotate">
            <summary> Arm angle of the wrist's rotation</summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.ArmHandGrasp">
            <summary> Arm angle of the claw's grasp</summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.HeadLift">
            <summary> Marionette angle of the head's lift </summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.RightArmLift">
            <summary> Marionette angle of the right arm's lift </summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.LeftArmLift">
            <summary> Marionette angle of the left arm's lift </summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.RearLift">
            <summary> Marionette angle of the lift of the rear of the Marionette </summary>
        </member>
        <member name="F:RoboNui.Core.RoboticAngle.CurtainOpen">
            <summary> Marionette angle of the curtain's open location </summary>
        </member>
        <member name="T:RoboNui.KinectAdapter.SkeletalJointMonitor">
            <summary>
            This class monitors the Kinect data feed for updates to the Joint positions for certain monitored joints. 
            The joints in question are passed in dynamically.
            After a certain period, also passed in dynamically, the new Joint positions are forwarded to the JAT.
            </summary>
            
            <remarks>Author: Jon Eisen (jon.m.eisen@gmail.com)</remarks>
            
        </member>
        <member name="F:RoboNui.KinectAdapter.SkeletalJointMonitor.log">
            <summary>Log for logging events in this class</summary>
        </member>
        <member name="F:RoboNui.KinectAdapter.SkeletalJointMonitor.nui">
            <summary>Nui runtime for communicating with the Kinect</summary>
        </member>
        <member name="F:RoboNui.KinectAdapter.SkeletalJointMonitor.lastTime">
            <summary>The last time the joints were published</summary>
        </member>
        <member name="M:RoboNui.KinectAdapter.SkeletalJointMonitor.#ctor(System.Object)">
            <summary> Constructor of this class. This starts up the Nui.Runtime and initializes the class fields. </summary>
        </member>
        <member name="M:RoboNui.KinectAdapter.SkeletalJointMonitor.nui_SkeletonFrameReady(System.Object,Microsoft.Research.Kinect.Nui.SkeletonFrameReadyEventArgs)">
            <summary>
            This method is an Event Handler for new Skeleton data coming available from the Kinect Nui.
            It periodically publishes a Joint Set composed of joints from the requested <see cref="F:ControllerTrackID"/> and the joints noted in 
            <see cref="F:InterestedJoints"/>. It also populates the field <see cref="F:PossibleTrackIDs"/> every call.
            </summary>
            <param name="e">Skeleton Frame arguments</param>
            <param name="sender">The caller of this method</param>
        </member>
        <member name="P:RoboNui.KinectAdapter.SkeletalJointMonitor.Period">
            <summary>
            The time period between retrieval of the Kinect joints
            </summary>
        </member>
        <member name="P:RoboNui.KinectAdapter.SkeletalJointMonitor.InterestedJoints">
            <summary> The list of joints the SJM should forward every <see cref="F:Period"/>.</summary>
        </member>
        <member name="P:RoboNui.KinectAdapter.SkeletalJointMonitor.ControllerTrackID">
            <summary>The current controller's <see cref="F:Microsoft.Research.Kinect.Nui.SkeletonData.TrackID"/>.
            
            Selected from the <see cref="P:RoboNui.KinectAdapter.SkeletalJointMonitor.PossibleTrackIDs"/></summary>
        </member>
        <member name="P:RoboNui.KinectAdapter.SkeletalJointMonitor.PossibleTrackIDs">
            <summary>A list of possible <see cref="F:Microsoft.Research.Kinect.Nui.SkeletonData.TrackID"/> to choose <see cref="F:ControllerTrackID"/> from.</summary>
        </member>
        <member name="T:RoboNui.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:RoboNui.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
